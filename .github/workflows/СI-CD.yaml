name: CI/CD for Nest + Redis on Kind

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  IMAGE_NAME: nest-redis-demo
  NAMESPACE: app-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ------------------
      # 1. Checkout repository
      # ------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # ------------------
      # 2. Set up Docker Buildx
      # ------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ------------------
      # 3. Build Docker image
      # ------------------
      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:latest .

      # ------------------
      # 4. Install kind
      # ------------------
      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # ------------------
      # 5. Create Kind cluster
      # ------------------
      - name: Create Kind cluster
        run: |
          kind create cluster --name demo
          kubectl cluster-info

      # ------------------
      # 6. Load Docker image into Kind
      # ------------------
      - name: Load Docker image into Kind
        run: |
          kind load docker-image $IMAGE_NAME:latest --name demo
      - name: Update image in deployment
        run: |
          sed -i "s|image: .*nest-redis-demo.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG|g" k8s/deployment.yaml

      # ------------------
      # 7. Apply Kubernetes manifests in correct order
      # ------------------
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secret-redis.yaml
          kubectl apply -f k8s/configmap-app.yaml
          kubectl apply -f k8s/deployment-redis.yaml
          kubectl apply -f k8s/deployment-app.yaml
          kubectl apply -f k8s/service-redis.yaml
          kubectl apply -f k8s/service-app.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/networkpolicy.yaml
          kubectl apply -f k8s/hpa.yaml

      # ------------------
      # 8. Debug: show deployments
      # ------------------
      - name: Check Deployments in namespace
        run: |
          echo "Deployments in namespace $NAMESPACE:"
          kubectl get deployments -n $NAMESPACE

      # ------------------
      # 9. Wait for NestJS Deployment to be ready
      # ------------------
      - name: Wait for NestJS Pods
        run: |
          echo "Waiting for NestJS Pods to be ready..."
          for i in {1..30}; do
            READY=$(kubectl get deploy nestjs-app -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')
            if [ "$READY" == "2" ]; then
              echo "All NestJS Pods are ready!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            kubectl get pods -n $NAMESPACE
            sleep 10
          done
          echo "ERROR: NestJS Pods did not become ready in time."
          kubectl describe deploy nestjs-app -n $NAMESPACE
          kubectl get pods -n $NAMESPACE
          exit 1

      # ------------------
      # 10. Wait for Redis Deployment to be ready
      # ------------------
      - name: Wait for Redis Pod
        run: |
          echo "Waiting for Redis Pod to be ready..."
          for i in {1..30}; do
            READY=$(kubectl get deploy redis -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')
            if [ "$READY" == "1" ]; then
              echo "Redis Pod is ready!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            kubectl get pods -n $NAMESPACE
            sleep 10
          done
          echo "ERROR: Redis Pod did not become ready in time."
          kubectl describe deploy redis -n $NAMESPACE
          kubectl get pods -n $NAMESPACE
          exit 1

      # ------------------
      # 11. Show logs from NestJS and Redis Pods
      # ------------------
      - name: Show Pods logs
        run: |
          for POD in $(kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].metadata.name}"); do
            echo "Logs for $POD:"
            kubectl logs -n $NAMESPACE $POD || true
          done

      # ------------------
      # 12. Cleanup kind cluster
      # ------------------
      - name: Delete Kind cluster
        if: always()
        run: |
          kind delete cluster --name demo
